import{_ as e,c as a,o as t,a2 as p}from"./chunks/framework.lL4UzoDo.js";const h=JSON.parse('{"title":"puppeteer 网页截图","description":"","frontmatter":{},"headers":[],"relativePath":"Node相关/Puppeteer长截图.md","filePath":"Node相关/Puppeteer长截图.md","lastUpdated":1678287106000}'),r={name:"Node相关/Puppeteer长截图.md"},o=p('<h1 id="puppeteer-网页截图" tabindex="-1">puppeteer 网页截图 <a class="header-anchor" href="#puppeteer-网页截图" aria-label="Permalink to &quot;puppeteer 网页截图&quot;">​</a></h1><h2 id="以往都是怎么生成海报的" tabindex="-1">以往都是怎么生成海报的？ <a class="header-anchor" href="#以往都是怎么生成海报的" aria-label="Permalink to &quot;以往都是怎么生成海报的？&quot;">​</a></h2><p>在开发中经常会遇到「生成海报长图」的需求，一般都是这么做的：</p><ul><li>后端生成：引入会图库进行绘制</li><li>前端生成：用原生 canvas 进行绘制、用一些 js 库（html-to-canvas）</li></ul><p>这么用过来的体验就是：无论是谁生成，都会遇到海报上各个元素的定位困难、样式还原的困难、动态内容和动态海报尺寸不好把控等问题。</p><p>因此，经过一波探索，接触了<code>puppeteer</code>这个「高级货！」，用完之后，简直有种相见恨晚的感觉！</p><p><strong>所以现在要想生成一个复杂的海报或者长图的流程变成了这样：</strong></p><ul><li>编写海报承载 web 页面</li><li>调用 puppeteer 截图服务，对 web 页面进行截图，并返回图片或者图片地址给调用者</li></ul><p><a href="https://mp.weixin.qq.com/s?__biz=MzIwNTEyMTc0Ng==&amp;mid=2648036664&amp;idx=1&amp;sn=ecf4fef91e47466a35e629d9903bc918&amp;chksm=8f14c485b8634d93786e19e9a906f356f90317e1d8dc486e21e0fc1daa8ac4b7b0983f20bd55&amp;token=1117402755&amp;lang=zh_CN#rd" target="_blank" rel="noreferrer">直接看我的公众号文章吧！</a></p>',9),c=[o];function d(s,i,l,n,_,u){return t(),a("div",null,c)}const f=e(r,[["render",d]]);export{h as __pageData,f as default};
