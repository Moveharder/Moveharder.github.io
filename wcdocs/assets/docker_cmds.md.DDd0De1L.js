import{_ as s,c as i,o as a,a2 as n}from"./chunks/framework.lL4UzoDo.js";const g=JSON.parse('{"title":"Docker 常用命令","description":"","frontmatter":{},"headers":[],"relativePath":"docker/cmds.md","filePath":"docker/cmds.md","lastUpdated":1732762945000}'),e={name:"docker/cmds.md"},h=n(`<h1 id="docker-常用命令" tabindex="-1">Docker 常用命令 <a class="header-anchor" href="#docker-常用命令" aria-label="Permalink to &quot;Docker 常用命令&quot;">​</a></h1><blockquote><p>以下命令涵盖了将一个本地项目打包成 docker 镜像，并运行、导出。然后在其它主机上导入镜像，并通过挂载本地项目文件夹的方式对镜像进行修改、构建。也可将镜像内的文件导出到本地进行二次开发。</p></blockquote><h4 id="初始化-dockerfile" tabindex="-1">初始化 Dockerfile <a class="header-anchor" href="#初始化-dockerfile" aria-label="Permalink to &quot;初始化 Dockerfile&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> init</span></span></code></pre></div><p>根据提示完成镜像文件初始化，需要自己手动在 <code>Dockerfile</code> 中处理 <code>WORKDIR</code> 创建时的权限问题。</p><p>一个 <code>Dockerfile</code> 示例如下：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ARG</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> NODE_VERSION=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">18</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FROM</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\${NODE_VERSION}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">-alpine</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Use production node environment by default.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ENV</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> NODE_ENV</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> production</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 调整 WORKDIR 的权限</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RUN</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mkdir</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/src/app</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;&amp; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">chown</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -R</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node:node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/src/app</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WORKDIR</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/src/app</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Download dependencies as a separate step to take advantage of Docker&#39;s caching.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Leverage a cache mount to /root/.npm to speed up subsequent builds.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Leverage a bind mounts to package.json and package-lock.json to avoid having to copy them into</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># into this layer.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RUN</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --mount=type=bind,source=package.json,target=package.json</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    --mount=type=cache,target=/root/.npm</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Run the application as a non-root user.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">USER</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 复制 package.json 和 package-lock.json 并安装依赖</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">COPY</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> package</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.json</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RUN</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Copy the rest of the source files into the image.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">COPY</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Expose the port that the application listens on.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">EXPOSE</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3003</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Run the application.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CMD</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> index.js</span></span></code></pre></div><h4 id="打包-docker-镜像" tabindex="-1">打包 docker 镜像 <a class="header-anchor" href="#打包-docker-镜像" aria-label="Permalink to &quot;打包 docker 镜像&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> buildx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> your_image_name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span></code></pre></div><h4 id="导出-docker-镜像" tabindex="-1">导出 docker 镜像 <a class="header-anchor" href="#导出-docker-镜像" aria-label="Permalink to &quot;导出 docker 镜像&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> save</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> your_image_name.tar</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> your_image_name</span></span></code></pre></div><p>生成的文件为 <code>tar</code> 格式，在需要的地方通过 <code>docker load</code> 命令导入。</p><h4 id="导入-docker-镜像" tabindex="-1">导入 docker 镜像 <a class="header-anchor" href="#导入-docker-镜像" aria-label="Permalink to &quot;导入 docker 镜像&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> load</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> your_image_name.tar</span></span></code></pre></div><h4 id="查看-docker-镜像" tabindex="-1">查看 docker 镜像 <a class="header-anchor" href="#查看-docker-镜像" aria-label="Permalink to &quot;查看 docker 镜像&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> images</span></span></code></pre></div><h4 id="运行镜像" tabindex="-1">运行镜像 <a class="header-anchor" href="#运行镜像" aria-label="Permalink to &quot;运行镜像&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 3003:3003</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> your_container_name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> your_image_name</span></span></code></pre></div><h4 id="查看容器运行状态" tabindex="-1">查看容器运行状态 <a class="header-anchor" href="#查看容器运行状态" aria-label="Permalink to &quot;查看容器运行状态&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ps</span></span></code></pre></div><h4 id="挂载本地项目运行镜像-开发阶段" tabindex="-1">挂载本地项目运行镜像（开发阶段） <a class="header-anchor" href="#挂载本地项目运行镜像-开发阶段" aria-label="Permalink to &quot;挂载本地项目运行镜像（开发阶段）&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 3003:3003</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> your_container_name</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> C:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\w</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">c</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ode_dev</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\y</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">our_project_dir:/usr/src/app</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/src/app/node_modules</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> your_image_name</span></span></code></pre></div><blockquote><p><code>C:\\wc\\code_dev\\your_project_dir</code> 部分表示本地项目路径，<code>/usr/src/app</code> 部分表示构建镜像时设置的<code>WORKDIR</code>目录，必须是绝对路径。</p></blockquote><blockquote><p><code>-v /usr/src/app/node_modules</code> 表示不挂载本地的 <code>node_modules</code>，让容器使用自身的依赖管理。<strong>这是因为在挂载本地项目时，会出现“挂载覆盖问题”导致项目无法运行。</strong></p></blockquote><h4 id="验证容器内是否包含某文件夹" tabindex="-1">验证容器内是否包含某文件夹 <a class="header-anchor" href="#验证容器内是否包含某文件夹" aria-label="Permalink to &quot;验证容器内是否包含某文件夹&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> exec</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -it</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> your_container_name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ls</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/src/app/node_modules</span></span></code></pre></div><h4 id="进入容器访问文件" tabindex="-1">进入容器访问文件 <a class="header-anchor" href="#进入容器访问文件" aria-label="Permalink to &quot;进入容器访问文件&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> exec</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -it</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> your_container_name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sh</span></span></code></pre></div><p>以此进入容器终端执行，可以执行 linux 指令或者安装项目以来，比如运行 <code>npm install</code> 安装 node 依赖。</p><h4 id="将容器内的项目代码保存到本地" tabindex="-1">将容器内的项目代码保存到本地 <a class="header-anchor" href="#将容器内的项目代码保存到本地" aria-label="Permalink to &quot;将容器内的项目代码保存到本地&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> your_container_name:/YOUR_WORKDIR</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> C:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\y</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">our_local_www_dir</span></span></code></pre></div><p>⏰ 在 Windows 上如果遇到报错，如：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">symlink</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ..</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ross-env</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">rc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\b</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ross-env.js</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> C:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\y</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">our_local_www_dir</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ode_modules</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\.</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">bin</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ross-env:</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">A</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> required</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> privilege</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> is</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> not</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> held</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> by</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> the</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> client.</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">...</span></span></code></pre></div><blockquote><p>这通常是由于 Windows 系统的权限问题，特别是在操作符号链接（symlink）时。Windows 在创建符号链接时通常需要管理员权限或特殊权限。</p></blockquote><p><strong>以“以管理员身份运行 PowerShell”，然后再执行相同命令即可解决。</strong></p>`,35),t=[h];function l(p,k,d,r,o,F){return a(),i("div",null,t)}const C=s(e,[["render",l]]);export{g as __pageData,C as default};
